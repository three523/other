```swift
import UIKit

class CellMoveStackView: UIStackView {
    
    var collectionView: UICollectionView
    private var buttonTextFont: UIFont = UIFont.systemFont(ofSize: 20, weight: .medium)
    private let bar: UIView = {
        let bar = UIView()
        bar.layer.borderColor = UIColor.black.cgColor
        bar.layer.borderWidth = 2
        return bar
    }()
    private var buttonViewCount = 0
    
    var barLeadingAnchor: NSLayoutConstraint?
    
    init(frame: CGRect, collectionView: UICollectionView) {
        self.collectionView = collectionView
        super.init(frame: frame)
        self.axis = .horizontal
        self.alignment = .fill
        self.distribution = .fillEqually
    }
    
    convenience init(frame: CGRect, collectionView: UICollectionView, font: UIFont) {
        self.init(frame: frame, collectionView: collectionView)
        self.buttonTextFont = font
    }
    
    required init(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func setButtonTitleFont(font: UIFont) {
        buttonTextFont = font
    }
    
    func addButtonList(textList: [String]) {
        textList.forEach { text in
            addButton(text: text)
        }
        addBar()
    }
    
    private func addButton(text: String) {
        
        buttonViewCount += 1
        
        let btn = UIButton()
        btn.setTitle(text, for: .normal)
        btn.titleLabel?.font = buttonTextFont
        btn.backgroundColor = .white
        btn.setTitleColor(.gray, for: .normal)
        btn.setTitleColor(.black, for: .selected)
        btn.addTarget(self, action: #selector(cellMove), for: .touchUpInside)
        
        if self.arrangedSubviews.isEmpty { btn.isSelected = true }
        
        self.addArrangedSubview(btn)
    }
    
    private func addBar() {
        let btn = self.arrangedSubviews.first!
        self.addSubview(bar)
        bar.translatesAutoresizingMaskIntoConstraints = false
        bar.heightAnchor.constraint(equalToConstant: 2).isActive = true
        bar.widthAnchor.constraint(equalTo: btn.widthAnchor).isActive = true
        bar.topAnchor.constraint(equalTo: btn.bottomAnchor).isActive = true
        barLeadingAnchor = bar.leadingAnchor.constraint(equalTo: btn.leadingAnchor)
        barLeadingAnchor?.isActive = true
        bar.bottomAnchor.constraint(equalTo: self.bottomAnchor, constant: 2).isActive = true
    }
    
    func stackViewButtonCount() -> Int {
        return buttonViewCount
    }
    
    func setButtonTitleColor(index: Int) {
        for buttonIndex in 0..<self.arrangedSubviews.count {
            if let btn = self.arrangedSubviews[buttonIndex] as? UIButton {
                btn.isSelected = index == buttonIndex ? true : false
            }
        }
    }
    
    @objc func cellMove(senderBtn: UIButton) {
        for index in 0..<self.arrangedSubviews.count {
            if let btn = self.arrangedSubviews[index] as? UIButton {
                btn.isSelected = false
                if btn == senderBtn {
                    
                    collectionView.scrollToItem(at: IndexPath(item: index, section: 0), at: .bottom, animated: true)
                    
                }
            }
        }
        senderBtn.isSelected = true
    }
}
```

- example

```swift
class ReviewViewController: UIViewController, UICollectionViewDataSource,  UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
        
    lazy var cellMoveStackView: CellMoveStackView = {
        let sv: CellMoveStackView = CellMoveStackView(frame: .zero, collectionView: collectionView)
        let textList: [String] = ["영화", "드라마", "책", "웹툰"]
        sv.addButtonList(textList: textList)
        return sv
    }()
    let dummyView2: UIView = UIView()
    lazy var collectionView: UICollectionView = {
        let flowLayot: UICollectionViewFlowLayout = UICollectionViewFlowLayout()
        flowLayot.scrollDirection = .horizontal
        flowLayot.minimumInteritemSpacing = 0
        flowLayot.minimumLineSpacing = 0
        let cv = UICollectionView(frame: .zero, collectionViewLayout: flowLayot)
        cv.dataSource = self
        cv.delegate = self
        cv.register(ReviewListCVCell.self, forCellWithReuseIdentifier: ReviewListCVCell.identifier)
        cv.isPagingEnabled = true
        cv.showsHorizontalScrollIndicator = false
        return cv
    }()

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .white
        
        viewSetting()
        // Do any additional setup after loading the view.
    }
    
    func viewSetting() {
        
        view.addSubview(cellMoveStackView)
        view.addSubview(dummyView2)
        view.addSubview(collectionView)
        
        let safeArea = view.safeAreaLayoutGuide
        
        cellMoveStackView.backgroundColor = .gray
        cellMoveStackView.translatesAutoresizingMaskIntoConstraints = false
        cellMoveStackView.topAnchor.constraint(equalTo: safeArea.topAnchor).isActive = true
        cellMoveStackView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        cellMoveStackView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        cellMoveStackView.heightAnchor.constraint(equalToConstant: 50).isActive = true
        
        dummyView2.backgroundColor = .lightGray
        dummyView2.translatesAutoresizingMaskIntoConstraints = false
        dummyView2.topAnchor.constraint(equalTo: cellMoveStackView.bottomAnchor, constant: 2).isActive = true
        dummyView2.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        dummyView2.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        dummyView2.heightAnchor.constraint(equalToConstant: 50).isActive = true
        
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.topAnchor.constraint(equalTo: dummyView2.bottomAnchor).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let count = cellMoveStackView.stackViewButtonCount()
        cellMoveStackView.barLeadingAnchor?.constant = scrollView.contentOffset.x / CGFloat(count)
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        let index = collectionView.indexPathsForVisibleItems[0].item
        cellMoveStackView.setButtonTitleColor(index: index)
        
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 4
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ReviewListCVCell.identifier, for: indexPath) as! ReviewListCVCell
        if indexPath.item == 0 { cell.backgroundColor = .cyan }
        else if indexPath.item == 1 { cell.backgroundColor = .green }
        else if indexPath.item == 2 { cell.backgroundColor = .red }
        else { cell.backgroundColor = .link }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
    }

}
```
